{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {

		"adminUsername": {
			"type": "string",
			"metadata": {
				"description": "Admin username on all VMs."
			}
		},
		"adminPassword": {
			"type": "securestring",
			"metadata": {
				"description": "Admin password on all VMs."
			}
		},
		"tokenLifetime": {
			"type": "string",
			"defaultValue": "00:01:00",
			"metadata": {
				"description": "The TTL of a generated token (default: 00:01:00)"
			}
		},
		"sslCertificate": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Certificate as Base64 encoded string."
			}
		},
		"sslCertificatePassword": {
			"type": "securestring",
			"metadata": {
				"description": "Certificate password for installation."
			}
		},
		"sslCertificateThumbprint": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Certificate thumbprint for identification in the local certificate store."
			}
		},
		"signCertificate": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Certificate as Base64 encoded string."
			}
		},
		"signCertificatePassword": {
			"type": "securestring",
			"metadata": {
				"description": "Certificate password for installation."
			}
		},
		"signCertificateThumbprint": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Certificate thumbprint for identification in the local certificate store."
			}
		},
		"_timestamp": {
			"type": "string",
			"defaultValue": "[utcNow('u')]"
		},
		"_artifactsLocation": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
			}
		},
		"_artifactsLocationSasToken": {
			"defaultValue": "",
			"type": "securestring",
			"metadata": {
				"description": "The sasToken required to access _artifactsLocation. When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
			}
		}
	},
	"variables": {
		"resourcePrefix": "[concat('rdg-', uniqueString(resourceGroup().id))]",
		"vmName": "[take(replace(variables('resourcePrefix'), '-', ''), 9)]",
		"vmssName": "[concat(variables('resourcePrefix'),'-vmss')]",
		"storageAccountName": "[replace(variables('resourcePrefix'), '-', '')]",
		"artifactsContainerName": "artifacts",
		"managedIdentityName": "[variables('resourcePrefix')]",
		"hostingPlanName": "[concat(variables('resourcePrefix'),'-hp')]",
		"functionAppName": "[concat(variables('resourcePrefix'),'-fa')]",
		"appInsightsName": "[concat(variables('resourcePrefix'),'-ai')]",
		"keyVaultName": "[concat(variables('resourcePrefix'),'-kv')]",
		"keyVaultSecretSSLCertificate": "SSLCertificate",
		"keyVaultSecretSignCertificate": "SignCertificate",
		"vnetName": "[concat(variables('resourcePrefix'),'-net')]",
		"snetName": "RemoteDesktopGateway",
		"subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('snetName'))]",
		"publicIPAddressName": "[concat(variables('resourcePrefix'),'-pip')]",
		"loadBalancerName": "[concat(variables('resourcePrefix'),'-lb')]",
		"loadBalancerFrontEndName": "loadBalancerFrontEnd",
		"loadBalancerBackEndName": "loadBalancerBackEnd",
		"loadBalancerProbeName": "loadBalancerHttpProbe",
		"loadBalancerNatPoolName": "loadBalancerNatPool",
		"githubRepoUrl": "https://github.com/Azure/azure-devtestlab.git",
		"githubBranch": "master",
		"artifactsUploadSasExpiry": "[dateTimeAdd(parameters('_timestamp'), 'PT10M')]",
		"artifactsUploadSasProperties": {
			"canonicalizedResource": "/artifacts",
			"signedResource": "c",
			"signedPermission": "acdlpruw",
			"signedExpiry": "[variables('artifactsUploadSasExpiry')]"
		}
	},
	"resources": [
		{
			"type": "Microsoft.ManagedIdentity/userAssignedIdentities",
			"name": "[variables('managedIdentityName')]",
			"apiVersion": "2018-11-30",
			"location": "[resourceGroup().location]"
		},
		{
			"name": "[variables('keyVaultName')]",
			"type": "Microsoft.KeyVault/vaults",
			"apiVersion": "2015-06-01",
			"location": "[resourceGroup().location]",
			"properties": {
				"enabledForDeployment": true,
				"enabledForTemplateDeployment": false,
				"enabledForVolumeEncryption": false,
				"tenantId": "[subscription().tenantId]",
				"sku": {
					"name": "standard",
					"family": "A"
				},
				"accessPolicies": [
					{
						"tenantId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), '2018-11-30').tenantId]",
						"objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), '2018-11-30').principalId]",
						"permissions": {
							"secrets": [
								"get"
							]
						}
					}
				]
			},
			"resources": [
				{
					"name": "[variables('keyVaultSecretSSLCertificate')]",
					"type": "secrets",
					"apiVersion": "2015-06-01",
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
					],
					"properties": {
						"value": "[base64(concat('{ \"data\":\"', parameters('sslCertificate'), '\", \"dataType\":\"pfx\", \"password\":\"', parameters('sslCertificatePassword'), '\" }'))]"
					}
				},
				{
					"name": "[variables('keyVaultSecretSignCertificate')]",
					"type": "secrets",
					"apiVersion": "2015-06-01",
					"dependsOn": [
						"[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
					],
					"properties": {
						"value": "[base64(concat('{ \"data\":\"', parameters('signCertificate'), '\", \"dataType\":\"pfx\", \"password\":\"', parameters('signCertificatePassword'), '\" }'))]"
					}
				}
			]
		},
		{
			"type": "Microsoft.Storage/storageAccounts",
			"apiVersion": "2019-06-01",
			"name": "[variables('storageAccountName')]",
			"location": "[resourceGroup().location]",
			"kind": "StorageV2",
			"sku": {
				"name": "Standard_LRS",
				"tier": "Standard"
			},
			"resources": [
				{
					"type": "blobServices/containers",
					"apiVersion": "2019-06-01",
					"name": "[concat('default/', variables('artifactsContainerName'))]",
					"dependsOn": [
						"[variables('storageAccountName')]"
					]
				}
			]
		},
		{
			"name": "[variables('hostingPlanName')]",
			"type": "Microsoft.Web/serverfarms",
			"apiVersion": "2015-04-01",
			"location": "[resourceGroup().location]",
			"properties": {
				"name": "[variables('hostingPlanName')]",
				"computeMode": "Dynamic",
				"sku": "Dynamic"
			}
		},
		{
			"name": "[variables('functionAppName')]",
			"type": "Microsoft.Web/sites",
			"apiVersion": "2015-08-01",
			"location": "[resourceGroup().location]",
			"kind": "functionapp",
			"dependsOn": [
				"[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
			],
			"identity": {
				"type": "UserAssigned",
				"userAssignedIdentities": {
					"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]": {}
				}
			},
			"properties": {
				"serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
				"siteConfig": {
					"appSettings": [
						{
							"name": "SignCertificateUrl",
							"value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultSecretSignCertificate'))).secretUriWithVersion]"
						},
						{
							"name": "TokenLifetime",
							"value": "[parameters('tokenLifetime')]"
						},
						{
							"name": "AzureWebJobsDashboard",
							"value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
						},
						{
							"name": "AzureWebJobsStorage",
							"value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
						},
						{
							"name": "APPINSIGHTS_INSTRUMENTATIONKEY",
							"value": "[reference(resourceId('microsoft.insights/components', variables('appInsightsName'))).InstrumentationKey]"
						},
						{
							"name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
							"value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
						},
						{
							"name": "WEBSITE_CONTENTSHARE",
							"value": "[toLower(variables('functionAppName'))]"
						},
						{
							"name": "FUNCTIONS_EXTENSION_VERSION",
							"value": "~1"
						},
						{
							"name": "WEBSITE_NODE_DEFAULT_VERSION",
							"value": "6.5.0"
						},
						{
							"name": "Project",
							"value": "samples/DevTestLabs/GatewaySample/src/RDGatewayAPI"
						}
					]
				}
			},
			"resources": [
				{
					"apiVersion": "2015-08-01",
					"name": "web",
					"type": "sourcecontrols",
					"dependsOn": [
						"[resourceId('Microsoft.Web/Sites', variables('functionAppName'))]"
					],
					"properties": {
						"RepoUrl": "[variables('githubRepoUrl')]",
						"branch": "[variables('githubBranch')]",
						"IsManualIntegration": true
					}
				}
			]
		},




		{
			"apiVersion": "2015-05-01",
			"type": "microsoft.insights/components",
			"name": "[variables('appInsightsName')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"ApplicationId": "[variables('appInsightsName')]"
			}
		},
		{
			"type": "Microsoft.Network/virtualNetworks",
			"name": "[variables('vnetName')]",
			"location": "[resourceGroup().location]",
			"apiVersion": "2017-04-01",
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"10.0.0.0/16"
					]
				},
				"subnets": [
					{
						"name": "[variables('snetName')]",
						"properties": {
							"addressPrefix": "10.0.0.0/24"
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('publicIPAddressName')]",
			"location": "[resourceGroup().location]",
			"apiVersion": "2017-04-01",
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[toLower(variables('resourcePrefix'))]"
				}
			}
		},
		{
			"type": "Microsoft.Network/loadBalancers",
			"name": "[variables('loadBalancerName')]",
			"location": "[resourceGroup().location]",
			"apiVersion": "2017-04-01",
			"dependsOn": [
				"[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
			],
			"properties": {
				"frontendIPConfigurations": [
					{
						"name": "[variables('loadBalancerFrontEndName')]",
						"properties": {
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
							}
						}
					}
				],
				"backendAddressPools": [
					{
						"name": "[variables('loadBalancerBackendName')]"
					}
				],
				"loadBalancingRules": [
					{
						"name": "roundRobinLBRule",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIPConfigurations/', variables('loadBalancerFrontEndName'))]"
							},
							"backendAddressPool": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/', variables('loadBalancerBackendName'))]"
							},
							"protocol": "Tcp",
							"frontendPort": 80,
							"backendPort": 80,
							"enableFloatingIP": false,
							"idleTimeoutInMinutes": 5,
							"probe": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/', variables('loadBalancerProbeName'))]"
							}
						}
					}
				],
				"probes": [
					{
						"name": "[variables('loadBalancerProbeName')]",
						"properties": {
							"protocol": "Tcp",
							"port": 80,
							"intervalInSeconds": "5",
							"numberOfProbes": "2"
						}
					}
				],
				"inboundNatPools": [
					{
						"name": "[variables('loadBalancerNatPoolName')]",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIPConfigurations/', variables('loadBalancerFrontEndName'))]"
							},
							"protocol": "Tcp",
							"frontendPortRangeStart": 50000,
							"frontendPortRangeEnd": 50119,
							"backendPort": 3389
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachineScaleSets",
			"name": "[variables('vmssName')]",
			"location": "[resourceGroup().location]",
			"apiVersion": "2017-03-30",
			"dependsOn": [
				"[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
				"[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName'))]",
				"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultSecretSSLCertificate'))]",
				"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultSecretSignCertificate'))]"
			],
			"sku": {
				"name": "Standard_D4s_v3",
				"capacity": 0
			},
			"properties": {
				"overprovision": "true",
				"upgradePolicy": {
					"mode": "Manual"
				},
				"virtualMachineProfile": {
					"storageProfile": {
						"osDisk": {
							"createOption": "FromImage",
							"caching": "ReadWrite"
						},
						"imageReference": {
							"publisher": "MicrosoftWindowsServer",
							"offer": "WindowsServer",
							"sku": "2019-Datacenter",
							"version": "latest"
						}
					},
					"osProfile": {
						"computerNamePrefix": "[variables('vmName')]",
						"adminUsername": "[parameters('adminUsername')]",
						"adminPassword": "[parameters('adminPassword')]",
						"secrets": [
							{
								"sourceVault": {
									"id": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
								},
								"vaultCertificates": [
									{
										"certificateUrl": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultSecretSSLCertificate'))).secretUriWithVersion]",
										"certificateStore": "My"
									},
									{
										"certificateUrl": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultSecretSignCertificate'))).secretUriWithVersion]",
										"certificateStore": "My"
									}
								]
							}
						]
					},
					"networkProfile": {
						"networkInterfaceConfigurations": [
							{
								"name": "nic",
								"properties": {
									"primary": true,
									"ipConfigurations": [
										{
											"name": "ipconfig",
											"properties": {
												"subnet": {
													"id": "[variables('subnetRef')]"
												},
												"loadBalancerBackendAddressPools": [
													{
														"id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/backendAddressPools/', variables('loadBalancerBackEndName'))]"
													}
												],
												"loadBalancerInboundNatPools": [
													{
														"id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/', variables('loadBalancerNatPoolName'))]"
													}
												]
											}
										}
									]
								}
							}
						]
					},
					"extensionProfile": {
						"extensions": []
					}
				}
			}
		}
	],
	"outputs": {
		"artifactsStorage": {
			"type": "string",
			"value": "[variables('storageAccountName')]"
		},
		"artifactsContainer": {
			"type": "string",
			"value": "[variables('artifactsContainerName')]"
		},
		"gatewayScaleSet": {
			"type": "string",
			"value": "[variables('vmssName')]"
		},
		"gatewayIP": {
			"type": "string",
			"value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName')), '2017-04-01').ipAddress]"
		},
		"gatewayFQDN": {
			"type": "string",
			"value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName')), '2017-04-01').dnsSettings.fqdn]"
		}
	}
}